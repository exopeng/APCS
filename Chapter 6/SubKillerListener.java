import java.awt.event.*;

import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class SubKillerListener implements ChangeListener, KeyListener, FocusListener, ActionListener, MouseListener {
	
	SubKillerPanel gamePanel;
	Timer timer;
	
	public SubKillerListener(SubKillerPanel panel, ScorePanel scorePanel) {
		gamePanel = panel;
		//register the listener
		gamePanel.addMouseListener(this);
		gamePanel.addKeyListener(this);
		gamePanel.addFocusListener(this);
		
		//no gamePanel.addActionListener()
		//JPanel doesn't generate action events
		//action events are generated by timers, jbuttons..etc
		
		//below is registration
		timer = new Timer(30, this);
		timer.start();
		
		//scorePanel is a JPanel, JPanel does not generate changeEvents
		//Add accessor method to scorePanel
		//component.addXXXList
		scorePanel.getSlider().addChangeListener(this);
	}
	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		char c = e.getKeyChar();
	}
	
	//called with every timer tick
	public void actionPerformed(ActionEvent evt) {
		String s = evt.getActionCommand(); //"About", "Quit", "Restart"
		
		if (s == null) {
			if (gamePanel.getBomb() != null) {
				gamePanel.getBomb().updateForNewFrame();
				gamePanel.getBoat().updateForNewFrame();
				gamePanel.getSub().updateForNewFrame();
			}
			gamePanel.repaint();
		} else if (s.equals("About")) {
			JOptionPane.showMessageDialog(gamePanel, "This game rocks");
		} else if (s.equals("Quit")) {
			System.exit(0);
		} else if (s.equals("Restart")) {
			gamePanel.restart();
		}
		
        
    }
	
	@Override
	public void keyPressed(KeyEvent evt) {
        int code = evt.getKeyCode();  // Which key was pressed?
        if (code == KeyEvent.VK_LEFT) {
                // Move the boat left.  (If this moves the boat out of the frame, its
                // position will be adjusted in the boat.updateForNewFrame() method.)
            gamePanel.getBoat().setCenterX(gamePanel.getBoat().getCenterX() - 15);
        }
        else if (code == KeyEvent.VK_RIGHT) {  
                // Move the boat right.  (If this moves boat out of the frame, its
                // position will be adjusted in the boat.updateForNewFrame() method.)
        	gamePanel.getBoat().setCenterX(gamePanel.getBoat().getCenterX() + 15);
        }
        else if (code == KeyEvent.VK_DOWN) {
                // Start the bomb falling, if it is not already falling.
            if ( gamePanel.getBomb().isFalling() == false )
                gamePanel.getBomb().setFalling(true);
        }
    }

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		gamePanel.requestFocus();
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void focusGained(FocusEvent e) {
		// TODO Auto-generated method stub
		timer.start();
		gamePanel.repaint(); //we use hasFocus() in subKillerPanel to check/
	//what color to draw the border
	}

	@Override
	public void focusLost(FocusEvent e) {
		// TODO Auto-generated method stub
		timer.stop();
		gamePanel.repaint();
		
	}

	@Override
	public void stateChanged(ChangeEvent e) {
		// TODO Auto-generated method stub
		JSlider source = (JSlider)e.getSource();
		//only once they have stopped adjusting slider
		if (!source.getValueIsAdjusting()) {
			int difficultyLevel = source.getValue();
			gamePanel.setSubSpeed(difficultyLevel);
			gamePanel.requestFocusInWindow();
			//gamePanel.repaint();
		}
	}
}



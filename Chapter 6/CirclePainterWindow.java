// *** Your name: Ethan Peng
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;

public class CirclePainterWindow extends JFrame implements ActionListener { 
	
	private CirclePanel circlePanel;
	private CirclePanelListener circlePanelListener;
	private JTextField radiusTextField;
	
	public CirclePainterWindow() {
		circlePanel = new CirclePanel();
		circlePanelListener = new CirclePanelListener(circlePanel);
		
		JPanel mainPanel = new JPanel();
		mainPanel.setLayout(new BorderLayout());
		mainPanel.add(circlePanel, BorderLayout.CENTER);
		
		// Create a panel for the buttons, label, and text field
		// and then add it in the south position.
		// Remember to add this as an ActionListener for the
		// buttons and text field.
		JPanel input = new JPanel();
		
		JButton removeRecent = new JButton("removeRecent");
		removeRecent.addActionListener(this);
		JButton removeAll = new JButton("removeAll");
		removeAll.addActionListener(this);
		
		JPanel radius = new JPanel();
		radius.add(new JLabel("Radius: "));
		radiusTextField = new JTextField("", 10);
		radius.add(radiusTextField);
		radiusTextField.addActionListener(this);
		
		input.add(removeRecent);
		input.add(removeAll);
		input.add(radius);
		
		mainPanel.add(input, BorderLayout.SOUTH);
		// The line "radiusTextField.selectAll();" will be helpful for completing your requirements. 
		// You can look up what it does. 
		// As for where it goes, think about which section of your code it would be most helpful in.
			
		JMenuBar menuBar = new JMenuBar();
		
		//Create a Color menu for the menu bar with Red, Blue, and Green menu items.
		//Remember to add this as an ActionListener for the menu items.
		JMenu color = new JMenu("Color");
		
		JMenuItem red = new JMenuItem("Red");
		JMenuItem blue = new JMenuItem("Blue");
		JMenuItem green = new JMenuItem("Green");
		
		red.addActionListener(this);
		blue.addActionListener(this);
		green.addActionListener(this);

		color.add(red);
		color.add(blue);
		color.add(green);
		
		menuBar.add(color);
		
		this.setContentPane(mainPanel);
		this.setJMenuBar(menuBar);

	}


	@Override
	public void actionPerformed(ActionEvent ev) {
		//write code to respond appropriately to all of the possible
		//ActionEvents generated by the menu items, buttons, and text field
		String s = ev.getActionCommand(); 
		if (s.equals("Green")) {
			circlePanelListener.setColorOfNewlyCreatedCircles(Color.GREEN);
			return;
		} else if (s.equals("removeRecent")) {
			circlePanel.removeMostRecentCircle();
			return;
		} else if (s.equals("removeAll")) {
			circlePanel.removeAllCircles();
			return;
		} else if (s.equals("Red")) {
			circlePanelListener.setColorOfNewlyCreatedCircles(Color.RED);
			return;
		} else if (s.equals("Blue")) {
			circlePanelListener.setColorOfNewlyCreatedCircles(Color.BLUE);
			return;


		} 
		try {
            String xStr = radiusTextField.getText();
            int x = Integer.parseInt(xStr);
            if (x <= 0) {
                radiusTextField.setText("Must enter a positive integer"); 
                radiusTextField.selectAll();
            } else {
            	circlePanelListener.setRadiusOfNewlyCreatedCircles(x);
            }
        }
        catch (NumberFormatException e) {
                // The string xStr is not a legal number.
            radiusTextField.setText("Must enter a positive integer");  
            radiusTextField.selectAll();
            radiusTextField.requestFocusInWindow();
            return;
        }
		
		
	}
	

}
